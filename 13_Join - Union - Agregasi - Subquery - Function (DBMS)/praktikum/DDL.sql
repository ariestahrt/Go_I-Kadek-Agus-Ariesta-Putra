DROP DATABASE alta;
CREATE DATABASE alta;
USE alta;

CREATE TABLE PRODUCT_TYPES(
		ID INT PRIMARY KEY AUTO_INCREMENT,
		NAME VARCHAR(255),
		CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER PRODUCT_TYPES_update BEFORE UPDATE ON `PRODUCT_TYPES` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;

CREATE TABLE OPERATORS(
		ID INT PRIMARY KEY AUTO_INCREMENT,
		NAME VARCHAR(255),
		CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER OPERATORS_update BEFORE UPDATE ON `OPERATORS` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;

CREATE TABLE PRODUCTS(
		ID INT PRIMARY KEY AUTO_INCREMENT,
		PRODUCT_TYPE_ID INT,
		OPERATOR_ID INT,
		CODE VARCHAR(50),
		NAME VARCHAR(100),
        PRICE NUMERIC(25,2),
		STATUS SMALLINT,
		CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		CONSTRAINT FK_PRODUCT_TYPES_PRODUCTS FOREIGN KEY (PRODUCT_TYPE_ID) REFERENCES PRODUCT_TYPES(ID),
		CONSTRAINT FK_OPERATORS_PRODUCTS FOREIGN KEY (OPERATOR_ID) REFERENCES OPERATORS(ID)
);

CREATE TRIGGER PRODUCTS_update BEFORE UPDATE ON `PRODUCTS` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;

CREATE TABLE PRODUCT_DESCRIPTIONS(
		ID INT PRIMARY KEY,
		DESCRIPTION TEXT,
		CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT FK_PRODUCTS_PD FOREIGN KEY (ID) REFERENCES PRODUCTS(ID)
);

CREATE TRIGGER PRODUCT_DESCRIPTIONS_update BEFORE UPDATE ON `PRODUCT_DESCRIPTIONS` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;

CREATE TABLE PAYMENT_METHODS(
		ID INT PRIMARY KEY AUTO_INCREMENT,
		NAME VARCHAR(255),
		STATUS SMALLINT,
		CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER PAYMENT_METHODS_update BEFORE UPDATE ON `PAYMENT_METHODS` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;

CREATE TABLE USERS(
		ID INT PRIMARY KEY AUTO_INCREMENT,
		NAME VARCHAR(255),
        STATUS VARCHAR(255),
		DOB DATE,
		GENDER CHAR(1),
		CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER USERS_update BEFORE UPDATE ON `USERS` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;

CREATE TABLE TRANSACTIONS(
		ID INT PRIMARY KEY AUTO_INCREMENT,
		USER_ID INT,
		PAYMENT_METHOD_ID INT,
		STATUS VARCHAR(10),
		TOTAL_QTY INT,
		TOTAL_PRICE NUMERIC(25,2),
		CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		CONSTRAINT FK_USERS_TRANSACTIONS FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
		CONSTRAINT FK_PAYMENT_METHOD_TRANSACTIONS FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHODS(ID)
);

CREATE TRIGGER TRANSACTIONS_update BEFORE UPDATE ON `TRANSACTIONS` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;

CREATE TABLE TRANSACTION_DETAILS(
		TRANSACTION_ID INT,
		PRODUCT_ID INT,
		STATUS SMALLINT,
		QTY INT,
		PRICE NUMERIC(25,2),
		CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		PRIMARY KEY (TRANSACTION_ID, PRODUCT_ID),
		CONSTRAINT FK_TRANSACTIONS_TD FOREIGN KEY (TRANSACTION_ID) REFERENCES TRANSACTIONS(ID),
		CONSTRAINT FK_PRODUCTS_TD FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
);

CREATE TRIGGER TRANSACTION_PRICE_update BEFORE UPDATE ON `TRANSACTION_DETAILS` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;

-- TRIGGER FOR AUTO COMPLETE PRICE
DELIMITER $$

CREATE TRIGGER TRANSACTION_PRICE_BI
BEFORE INSERT
ON TRANSACTION_DETAILS FOR EACH ROW
BEGIN
    SET NEW.PRICE = NEW.QTY * (SELECT PRICE P FROM PRODUCTS P WHERE P.ID = NEW.PRODUCT_ID );
END$$

DELIMITER ;

DELIMITER $$

-- TRIGGER FOR AUTO FILL TRANSACTIONS TOTAL_PRICE AND TOTAL_QTY
DELIMITER $$

CREATE TRIGGER TRANSACTION_UPDATE_TOTAL_PRICE_AND_QTY_AI
AFTER INSERT
ON TRANSACTION_DETAILS FOR EACH ROW
BEGIN
    UPDATE TRANSACTIONS T
    SET
        TOTAL_PRICE = (SELECT SUM(TD.PRICE) FROM TRANSACTION_DETAILS TD WHERE TD.TRANSACTION_ID = NEW.TRANSACTION_ID),
        TOTAL_QTY = (SELECT SUM(TD.QTY) FROM TRANSACTION_DETAILS TD WHERE TD.TRANSACTION_ID = NEW.TRANSACTION_ID)
    WHERE T.ID = NEW.TRANSACTION_ID;
END$$

DELIMITER ;

-- TRIGGER FOR AUTO FILL TRANSACTIONS TOTAL_PRICE AND TOTAL_QTY
DELIMITER $$

CREATE TRIGGER TRANSACTION_UPDATE_TOTAL_PRICE_AND_QTY_AU
AFTER UPDATE
ON TRANSACTION_DETAILS FOR EACH ROW
BEGIN
    UPDATE TRANSACTIONS T
    SET
        TOTAL_PRICE = (SELECT SUM(TD.PRICE) FROM TRANSACTION_DETAILS TD WHERE TD.TRANSACTION_ID = NEW.TRANSACTION_ID),
        TOTAL_QTY = (SELECT SUM(TD.QTY) FROM TRANSACTION_DETAILS TD WHERE TD.TRANSACTION_ID = NEW.TRANSACTION_ID)
    WHERE T.ID = NEW.TRANSACTION_ID;
END$$

DELIMITER ;

-- ===============================================